#include "services_microboone.fcl"
#include "filters.fcl"

process_name: FilterProtons

services:
{
  # Load the service that manages root files for histograms
  TFileService: { fileName: "%ifb_%tc_filtered_hist.root" }
  Timing: {}
  RandomNumberGenerator: {}  #ART native random number generator
  #message: @local::standard_warning
  #user: @local::argoneut_services 	     
}


# Source is a root file
source:
{
  module_type: RootInput
  #maxEvents: 10  # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName: "%ifb_%tc_filtered.root"  # Default file name, can override from command line with -o or --output
   SelectEvents: {SelectEvents:[reco]}
   fastCloning: true
   dataTier: "filtered"
   compressionLevel: 1
 }
}

# Define and configure some modules to do work on each event
# First modules are defined; they are scheduled later
# Modules are grouped by type
physics:
{

 producers: {}

 filters:
 {
  filter: @local::evtfilter
 }


 # Define the producer and filter modules for this path, order matters
 # Filters reject all following items
 # See lines starting physics.producers below
 reco: [ filter ] 
 #reco: []
 #filter: [ muonfilter ]

 # Define the output stream; there could be more than one if using filters 
 stream1:  [ out1 ]

 # trigger_paths is a keyword and contains the paths that modify the art::event, i.e. filters and producers
 trigger_paths: [ reco ] 

 # end_paths is a keyword and contains the paths that do not modify the art::Event, i.e. analyzers and output streams
 # These all run simultaneously
 end_paths:     [ stream1 ]  
}


physics.filters.filter.EventList: "/uboone/app/users/tmw/projects/dl_litemaker/data_samples/michels/eventlists/michel_events_all_XXXX.txt"
physics.filters.filter.Selection: 1

# Don't preload the FFT kernel
#services.user.LArFFT.FFTOption: ""
